791
00:58:24,370 --> 00:58:29,060
程序无法将其作为代码读取，因此会被跳过。从本质上讲，它变成了

792
00:58:29,060 --> 00:58:34,150
只有程序员才能读取的东西。不同语言的语法各不相同，但通常涉及

793
00:58:34,150 --> 00:58:37,790
在您想要注释的代码之前或周围放置一些符号。现在可以在屏幕上看

794
00:58:37,790 --> 00:58:41,630
到如何使用不同语言进行注释的示例。此外，当您注释某些内容时，

795
00:58:41,630 --> 00:58:46,930
IDE

796
00:58:46,930 --> 00:58:51,991
会将代码行灰度化，从而非常容易确定哪些内容被注释了，哪些内容没有被注释。注释代

797
00:58:51,991 --> 00:58:56,460
码在计算机眼中“删除”了它，但实际上并没

798
00:58:56,460 --> 00:59:00,880
有删除它。如果在注释一段代码之前存在问题

799
00:59:00,880 --> 00:59:04,810
，但之后问题消失了，那么那段代码就是罪魁

800
00:59:04,810 --> 00:59:09,400
祸首。如果您注释掉部分代码但仍然存在问题

801
00:59:09,400 --> 00:59:14,000
，请转到另一部分，直到找到罪魁祸首。找到

802
00:59:14,000 --> 00:59:15,580
之后，您可以对其进行调整，直到它按预期工

803
00:59:15,580 --> 00:59:19,202
作，或者将其完全删除，这样您将再次拥有一

804
00:59:19,202 --> 00:59:23,190
个功能齐全的程序。好极了！既然我们已经讨

805
00:59:23,190 --> 00:59:28,070
论了如果遇到错误该怎么办以及如何查找和修复错误的策略，我想谈谈一些可以用来避免错

806
00:59:28,070 --> 00:59:31,770
误的策略。首先，经常备份代码。如果代码完全出错而你无法修复它，你会希望能够恢复到

807
00:59:31,770 --> 00:59:35,980
代码仍在运行的先前版本。如果你经常保存，那么你可能不会丢失太多工作。Github

808
00:59:35,980 --> 00:59:40,630
或 Subversion

809
00:59:40,630 --> 00:59:45,261
等版本管理器可以帮助解决这个问题，因为它们将代码备份到在

810
00:59:45,261 --> 00:59:48,950
线云服务中，你可以在任何时候轻松地从中获取程序的先前版本。

