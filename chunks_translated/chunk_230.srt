1066
01:19:59,881 --> 01:20:05,250
这是什么意思？好吧，假设您在游戏中有一些字符串函数，

1067
01:20:05,250 --> 01:20:09,440
其中有一个 if 语句，如果玩家得分高于

1068
01:20:09,440 --> 01:20:14,250
10，则返回一条祝贺消息。如果您打印此函数的结果并且玩家的得分高于

1069
01:20:14,250 --> 01:20:18,920
10，则此方法可以正常工作。但是，如果 playerScore

1070
01:20:18,920 --> 01:20:22,220
小于 10，则您不会输入 if

1071
01:20:22,220 --> 01:20:26,969
语句，然后您没有准备好返回给用户的内容，因此该函数将抛出错误。您必

1072
01:20:26,969 --> 01:20:31,340
须覆盖所有路径，这看似简单，但如果您创建的函数中包含包含大量案例的

1073
01:20:31,340 --> 01:20:36,840
switch

1074
01:20:36,840 --> 01:20:40,540
语句，则很快就会失控。为了确保不会发生这种情况，我喜欢在函数底部放置一个

1075
01:20:40,540 --> 01:20:44,760
return

1076
01:20:44,760 --> 01:20:57,650
语句，其中包含一个字符串或整数，这些字符串或整数

1077
01:20:57,650 --> 01:21:02,170
是如此独特，以至于我能够判断代码运行不正常并可以修

1078
01:21:02,170 --> 01:21:03,960
复它。然而，我想要表达的重点是，始终覆盖你的出口，并且始终为用户可能遇到的任何情况准备好返回语句。

